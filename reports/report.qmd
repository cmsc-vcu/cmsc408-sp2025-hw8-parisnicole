---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-parisnicole>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
SELECT *
FROM world_bank_data.wdi_country
WHERE 
  `Region` IS NULL
  OR `Income Group` IS NULL
  OR `Country Code` IN (
    'AFE', 'AFW', 'ARB', 'CEB', 'CSS', 'EAS', 'EAP', 'EAR', 'ECA', 'EMU',
    'EUU', 'FCS', 'HPC', 'HIC', 'IBD', 'IBT', 'IDA', 'IDB', 'IDX', 'LAC',
    'LCN', 'LIC', 'LMC', 'LMY', 'MEA', 'MIC', 'MNA', 'NAC', 'OED', 'OSS',
    'PRE', 'PSS', 'PST', 'SAS', 'SSA', 'SSF', 'SST', 'TEA', 'TEC', 'TLA',
    'TMN', 'TSA', 'TSS', 'UMC', 'WLD'
  );

""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
CREATE TABLE wdi_country AS
SELECT *
FROM world_bank_data.wdi_country
WHERE 
  `Region` IS NOT NULL
  AND `Income Group` IS NOT NULL
  AND `Country Code` NOT IN (
    'AFE', 'AFW', 'ARB', 'CEB', 'CSS', 'EAS', 'EAP', 'EAR', 'ECA', 'EMU',
    'EUU', 'FCS', 'HPC', 'HIC', 'IBD', 'IBT', 'IDA', 'IDB', 'IDX', 'LAC',
    'LCN', 'LIC', 'LMC', 'LMY', 'MEA', 'MIC', 'MNA', 'NAC', 'OED', 'OSS',
    'PRE', 'PSS', 'PST', 'SAS', 'SSA', 'SSF', 'SST', 'TEA', 'TEC', 'TLA',
    'TMN', 'TSA', 'TSS', 'UMC', 'WLD'
  );
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS country_count
FROM wdi_country;
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS "Countries in 2020"
FROM wdi_country;
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
SELECT DISTINCT `Region`
FROM world_bank_data.wdi_country
ORDER BY `Region`;

""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT 
  `Region`,
  COUNT(*) AS country_count
FROM 
  wdi_country
GROUP BY 
  `Region`
ORDER BY 
  country_count DESC;

""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
SELECT 
  `Long Name`,
  `Region`
FROM 
  wdi_country
WHERE 
  `Region` = 'North America'
ORDER BY 
  `Long Name`;

""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
SELECT 
  `Region`,
  `Short Name`,
  `Long Name`
FROM 
  wdi_country
WHERE 
  `Short Name` = 'Qatar';

""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
SELECT 
  `Country Code`, 
  `Short Name`, 
  `2-alpha code` AS abbr, 
  `WB-2 code` AS wb_abbr, 
  `Region`
FROM 
  wdi_country
WHERE 
  `2-alpha code` IS NOT NULL
  AND `WB-2 code` IS NOT NULL
  AND `2-alpha code` <> `WB-2 code`
ORDER BY 
  `Short Name`;

""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT 
  `Income Group` AS income_category,
  COUNT(*) AS country_count
FROM 
  wdi_country
GROUP BY 
  `Income Group`
ORDER BY 
  country_count DESC;

""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
SELECT 
  `Country Code`, 
  `Short Name`, 
  `Region`, 
  `Income Group`
FROM 
  wdi_country
WHERE 
  `Income Group` IS NULL
     OR `Income Group` = ''
ORDER BY 
  `Short Name`;

""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
SELECT 
  `Country Code`,
  `Short Name`,
  `Region`,
  `Income Group`
FROM 
  wdi_country
WHERE 
  `Income Group` IS NULL
     OR `Income Group` = ''
ORDER BY 
  `Short Name`;
""")


```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
SELECT 
  `Country Code`, 
  `Short Name`, 
  `Region`, 
  `Income Group`
FROM 
  wdi_country
WHERE 
  `Income Group` IS NULL
     OR `Income Group` = ''
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT 
  `Region` AS region,
  `Income Group` AS income_group,
  COUNT(*) AS country_count
FROM 
  wdi_country
GROUP BY 
  `Region`, `Income Group`
ORDER BY 
  `Region`, `Income Group`;

""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
SELECT 
  `Region`,

  SUM(CASE WHEN `Income Group` = 'High income' THEN 1 ELSE 0 END) AS high_income,
  SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN 1 ELSE 0 END) AS upper_middle_income,
  SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN 1 ELSE 0 END) AS lower_middle_income,
  SUM(CASE WHEN `Income Group` = 'Low income' THEN 1 ELSE 0 END) AS low_income,
  SUM(CASE WHEN `Income Group` NOT IN ('High income', 'Upper middle income', 'Lower middle income', 'Low income') THEN 1 ELSE 0 END) AS other,

  COUNT(*) AS total
FROM 
  wdi_country
GROUP BY 
  `Region`
ORDER BY 
  `Region`;

""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
SELECT 
  COUNT(*) AS country_count,
  `Region`,
  `Income Group`
FROM 
  wdi_country
WHERE 
  `Income Group` = 'Low income'
GROUP BY 
  `Region`, `Income Group`
ORDER BY 
  country_count DESC
LIMIT 1;

""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
SELECT 
  `Country Code`,
  `Short Name`,
  `Region`,
  `Income Group`
FROM 
  wdi_country
WHERE 
  `Region` = (
    SELECT `Region`
    FROM wdi_country
    WHERE `Country Code` = 'MHL'
  )
  AND `Income Group` = (
    SELECT `Income Group`
    FROM wdi_country
    WHERE `Country Code` = 'MHL'
  )
ORDER BY 
  `Short Name`;

""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
WITH all_regions AS (
  SELECT DISTINCT `Region` FROM wdi_country
),
all_income_groups AS (
  SELECT DISTINCT `Income Group` AS income_group FROM wdi_country
),
all_combinations AS (
  SELECT 
    r.`Region`, 
    i.income_group
  FROM 
    all_regions r
  CROSS JOIN 
    all_income_groups i
),
existing_combinations AS (
  SELECT 
    `Region`, 
    `Income Group` AS income_group
  FROM 
    wdi_country
  GROUP BY 
    `Region`, `Income Group`
)
SELECT 
  ac.Region, 
  ac.income_group
FROM 
  all_combinations ac
LEFT JOIN 
  existing_combinations ec
ON 
  ac.Region = ec.Region AND ac.income_group = ec.income_group
WHERE 
  ec.Region IS NULL
ORDER BY 
  ac.Region, ac.income_group;

""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
WITH base_counts AS (
  SELECT 
    `Region`,
    `Income Group` AS income_group,
    COUNT(*) AS country_count
  FROM 
    wdi_country
  GROUP BY 
    `Region`, `Income Group`
),
region_totals AS (
  SELECT 
    `Region`,
    COUNT(*) AS total_in_region
  FROM 
    wdi_country
  GROUP BY 
    `Region`
),
income_totals AS (
  SELECT 
    `Income Group` AS income_group,
    COUNT(*) AS total_in_income_group
  FROM 
    wdi_country
  GROUP BY 
    `Income Group`
),
total_all AS (
  SELECT COUNT(*) AS total_countries FROM wdi_country
)

SELECT 
  b.`Region`,
  b.income_group,
  b.country_count,
  r.total_in_region,
  i.total_in_income_group,
  t.total_countries,
  ROUND((b.country_count / t.total_countries) * 100, 2) AS percent_of_total
FROM 
  base_counts b
JOIN 
  region_totals r ON b.`Region` = r.`Region`
JOIN 
  income_totals i ON b.income_group = i.income_group
CROSS JOIN 
  total_all t
ORDER BY 
  b.`Region`, b.income_group;

""")


```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
WITH base_counts AS (
  SELECT 
    `Region`,
    `Income Group` AS income_group,
    COUNT(*) AS country_count
  FROM 
    wdi_country
  GROUP BY 
    `Region`, `Income Group`
),
total_all AS (
  SELECT COUNT(*) AS total_countries FROM wdi_country
)

SELECT 
  b.`Region`,

  ROUND(SUM(CASE WHEN b.income_group = 'High income' THEN b.country_count ELSE 0 END) * 100.0 / MAX(t.total_countries), 2) AS high_income_pct,
  ROUND(SUM(CASE WHEN b.income_group = 'Upper middle income' THEN b.country_count ELSE 0 END) * 100.0 / MAX(t.total_countries), 2) AS upper_middle_income_pct,
  ROUND(SUM(CASE WHEN b.income_group = 'Lower middle income' THEN b.country_count ELSE 0 END) * 100.0 / MAX(t.total_countries), 2) AS lower_middle_income_pct,
  ROUND(SUM(CASE WHEN b.income_group = 'Low income' THEN b.country_count ELSE 0 END) * 100.0 / MAX(t.total_countries), 2) AS low_income_pct,
  ROUND(SUM(CASE WHEN b.income_group NOT IN ('High income', 'Upper middle income', 'Lower middle income', 'Low income') THEN b.country_count ELSE 0 END) * 100.0 / MAX(t.total_countries), 2) AS other_pct,

  ROUND(SUM(b.country_count) * 100.0 / MAX(t.total_countries), 2) AS total_pct

FROM 
  base_counts b
CROSS JOIN 
  total_all t
GROUP BY 
  b.`Region`
ORDER BY 
  b.`Region`;

""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
WITH income_counts AS (
  SELECT 
    `Income Group` AS income_group,
    COUNT(*) AS country_count
  FROM 
    wdi_country
  GROUP BY 
    `Income Group`
),
total_count AS (
  SELECT COUNT(*) AS total_countries FROM wdi_country
)

SELECT 
  i.income_group,
  i.country_count,
  t.total_countries,
  ROUND(i.country_count * 100.0 / t.total_countries, 2) AS percent_of_total
FROM 
  income_counts i
CROSS JOIN 
  total_count t
ORDER BY 
  i.country_count DESC;

""")

```


# Reflection

1. Throughout Homework 8, I developed my confidence in writing basic and intermediate SQL queries, especially when it came to using SELECT, WHERE, GROUP BY, ORDER BY, and JOIN statements. I now feel much more comfortable with filtering data, counting records, and summarizing information using aggregate functions like COUNT() and SUM(). The skills I still need more practice with are advanced transformations such as when I had to create pivot-style outputs with CASE statements or identifying missing combinations using joins. These tasks definitely challenged me and made me think more logically about how to visualize the final output before writing the code. Overall, this assignment helped reinforce my understanding of how to analyze real-world data using SQL. It also taught me how useful and powerful SQL is in our everyday world.

2. For difficult tasks such as Task 18, I tried to break down the problem into smaller, more manageable parts by asking myself what the question was asking and the actual logical steps behind it. For example, in Task 18, I realized it was about identifying missing combinations, so I listed all possible region and income group pairs using a CROSS JOIN, then compared that to the existing pairs using a LEFT JOIN to isolate the gaps. The challenges I faced were mainly centered around grouping and filtering. I had a couple errors regarding those two things in MYSQL. My solution to figuring out where an error was coming from was by individually testing each piece of the query in isolation and seeing if it works when I run it on VS code. If I were to approach a similar project in the future, I would most likely try to sketch out the logic first. I’m more of a visual learner so seeing how something works helps me the most with figuring out how to go about a problem.


3. Homework 8 helped me develop a much deeper understanding of how SQL can be used not just to retrieve data, but to analyze, transform, and uncover insights from large datasets. One of my biggest takeaways from this assignment was learning how to structure queries using grouping, joins and conditional logic to help break down complex problems. I also learned how valuable it is to not jump immediately into queries, especially if it is complex.  Building each part of the logic step by step made it easier to debug and ensured everything was accurate. These skills definitely apply to real-world scenarios such as where data needs to be cleaned, explored, and transformed. Some examples would include data analytic roles and backend development. They’ll also be important for future coursework involving database design. I will be taking a data science class next semester, so knowing these concepts will definitely help me.


# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

